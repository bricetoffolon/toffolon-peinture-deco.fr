# Base stage with minimal dependencies
FROM node:20-slim AS base
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
ENV NODE_ENV=development
RUN corepack enable
WORKDIR /app

# Dependencies stage
FROM base AS deps
COPY package.json pnpm-lock.yaml* ./
# Use mount cache for better performance
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile

# Build stage
FROM deps AS build
ENV NODE_ENV=production
# Copy only needed files for build
COPY tsconfig*.json ./
COPY src ./src
COPY src/prisma ./prisma
RUN npx prisma generate
RUN pnpm run build

# Production stage - minimal final image
FROM node:20-slim AS production
ENV NODE_ENV=production
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable
WORKDIR /app

# Copy only production dependencies
COPY package.json pnpm-lock.yaml* ./
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile

# Copy Prisma schema (needed for runtime)
COPY --from=build /app/src/prisma ./prisma
# Copy built application
COPY --from=build /app/dist ./dist
COPY --from=build /app/node_modules ./node_modules

RUN apt-get update && apt-get install -y openssl && rm -rf /var/lib/apt/lists/*
RUN chown -R node:node /app

USER node
ENV DATABASE_URL="file:./../dev.db"
ENV PORT=8000
EXPOSE 8000
# Start the NestJS application
CMD ["pnpm", "start:migrate:prod"]