name: 'Continuous Deployment'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true
      terraform-option:
        type: choice
        description: Choose to create or delete your infra
        options:
          - apply
          - destroy


permissions:
  contents: read

jobs:
  terraform:
    name: 'Deploy Terraform'
    runs-on: ubuntu-latest
    env:
      DEPLOYMENT_ENVIRONMENT:  ${{ github.event.inputs.environment || 'production' }}
      TERRAFORM_OPTION: ${{ github.event.inputs.terraform-option || 'apply' }}
    environment:  ${{ github.event.inputs.environment || 'production' }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infra/terraform/${{ env.DEPLOYMENT_ENVIRONMENT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare public key file
        run: |
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > public_key.pem

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.2"

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -var-file=${{ env.DEPLOYMENT_ENVIRONMENT }}.tfvars
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_ssh_key: ${{ secrets.SSH }}

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform ${{ env.TERRAFORM_OPTION }}
        run: terraform ${{ env.TERRAFORM_OPTION }} -var-file=${{ env.DEPLOYMENT_ENVIRONMENT }}.tfvars -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SCW_ACCESS_KEY: ${{ secrets.SCW_ACCESS_KEY }}
          SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_ssh_key: ${{ secrets.SSH }}